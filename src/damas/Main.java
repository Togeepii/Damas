package damas;

import java.awt.Color;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 *
 * @author tsuzukayama
 */
public class Main extends javax.swing.JFrame {

    public JButton[][] b;
    HashMap<String, JButton> buttonCache = new HashMap<>();
    boolean isFirstClicked = false;
    int[] posPrimeiro = new int[2];

    Jogador jPreto, jBranco;

    Turno turno;

    Ranking sql = new Ranking();

    URL iPretoURL = getClass().getResource("/resources/black.png");
    ImageIcon iPreto = new ImageIcon(iPretoURL);
    URL iBrancoURL = getClass().getResource("/resources/white.png");
    ImageIcon iBranco = new ImageIcon(iBrancoURL);
    URL iPretoPecaURL = getClass().getResource("/resources/pecab.png");
    ImageIcon iPretoPeca = new ImageIcon(iPretoPecaURL);
    URL iBrancoPecaURL = getClass().getResource("/resources/pecaw.png");
    ImageIcon iBrancoPeca = new ImageIcon(iBrancoPecaURL);
    URL iPretoDamaURL = getClass().getResource("/resources/damab.png");
    ImageIcon iPretoDama = new ImageIcon(iPretoDamaURL);
    URL iBrancoDamaURL = getClass().getResource("/resources/damaw.png");
    ImageIcon iBrancoDama = new ImageIcon(iBrancoDamaURL);

    Border thickBorder = new LineBorder(Color.BLACK, 1);

    /**
     * Creates new form Main
     */
    public Main() {

        initComponents();
        this.setLocationRelativeTo(null);
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        lPreto = new javax.swing.JLabel();
        lBranco = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Panel.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        Panel.setPreferredSize(new java.awt.Dimension(600, 600));
        Panel.setLayout(new java.awt.GridLayout(8, 8));

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        lPreto.setBackground(new java.awt.Color(196, 0, 4));
        lPreto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lPreto.setText("Vermelho");
        lPreto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(196, 0, 4), 3));
        lPreto.setOpaque(true);

        lBranco.setBackground(new java.awt.Color(255, 255, 255));
        lBranco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lBranco.setText("Branco");
        lBranco.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        lBranco.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lPreto)
                    .addComponent(lBranco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lPreto, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lBranco, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel Panel;
    private javax.swing.JLabel lBranco;
    private javax.swing.JLabel lPreto;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void init() {
        //  lBranco.setVisible(false);
        //  lPreto.setVisible(false);

        b = new JButton[8][8];
        Insets buttonMargin = new Insets(0, 0, 0, 0);
        ActionListener ac;
        ac = new ActionListener() {

            //clicar nas peças
            @Override
            public void actionPerformed(ActionEvent ae) {
                String command = ((JButton) ae.getSource()).getActionCommand();
                int[] pos = new int[2];

                //pega o botao que foi clicado
                JButton button = ((JButton) ae.getSource());
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (button == b[i][j]) {
                            //JOptionPane.showMessageDialog(Panel, "tem peça");
                            pos[0] = i;
                            pos[1] = j;

                        }
                    }
                }
                int[] finalpos;
                finalpos = turno.jogada(pos[0], pos[1]);
                if (!turno.isFirstClicked) {
                    button.setBorder(thickBorder);
                }else{
                    int i = Turno.umLinha;
                    int j = Turno.umColuna;
                    b[i][j].setBorder(null);
                }
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (!((j % 2 == 1 && i % 2 == 1) || (j % 2 == 0 && i % 2 == 0))) {                          
                            if (!jBranco.temPeca(i, j) && !jPreto.temPeca(i, j)) {
                                b[i][j].setIcon(iPreto);
                            } else if (jBranco.temPeca(i, j)) {
                                if (jBranco.getPeca(i, j).isDama) {
                                    b[i][j].setIcon(iBrancoDama);
                                } else {
                                    b[i][j].setIcon(iBrancoPeca);
                                }
                            } else if (jPreto.temPeca(i, j)) {
                                if (jPreto.getPeca(i, j).isDama) {
                                    b[i][j].setIcon(iPretoDama);
                                } else {
                                    b[i][j].setIcon(iPretoPeca);
                                }
                            }
                        }
                    }
                }
                if (Turno.currentTurn == 'b') {
                    lBranco.setOpaque(true);
                    lPreto.setOpaque(false);
                    lBranco.setEnabled(true);
                    lPreto.setEnabled(false);

                } else {
                    lPreto.setOpaque(true);
                    lBranco.setOpaque(false);
                    lPreto.setEnabled(true);
                    lBranco.setEnabled(false);
                }
                try {
                    if (finalpos[0] == 100 && finalpos[1] == 100 && finalpos[2] == 100) {
                        System.out.println("jogo acabou");
                        if (jBranco.jogadorPerdeu()) {
                            String nome = JOptionPane.showInputDialog(Panel, "Jogador preto ganhou!");
                            Ranking.addJogador(nome, jBranco.jogada);
                        } else {
                            String nome = JOptionPane.showInputDialog(Panel, "Jogador branco ganhou!");
                            Ranking.addJogador(nome, jPreto.jogada);
                        }
                        for (int i = 0; i < 8; i++) {
                            for (int j = 0; j < 8; j++) {
                                b[i][j].setEnabled(false);

                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        };
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                b[i][j] = new JButton();
                //b[i][j].setText(String.valueOf(i) + ", " + String.valueOf(j));
                b[i][j].setMargin(buttonMargin);
                //b[i][j].setContentAreaFilled(false);
                if ((j % 2 == 1 && i % 2 == 1) || (j % 2 == 0 && i % 2 == 0)) {
                    b[i][j].setBackground(Color.WHITE);
                    b[i][j].setIcon(iBranco);
                    b[i][j].setHorizontalTextPosition(SwingConstants.CENTER);
                    b[i][j].setEnabled(false);
                } else {
                    b[i][j].setBackground(Color.BLACK);
                    b[i][j].setIcon(iPreto);
                    b[i][j].setHorizontalTextPosition(SwingConstants.CENTER);
                    b[i][j].addActionListener(ac);
                    b[i][j].setEnabled(false);
                }
                Panel.add(b[i][j]);
            }
        }

        //Toolbar init
        JButton novoJogoLocal = new JButton("Novo jogo local");
        JButton Ranking = new JButton("Ranking");
        toolbar.add(novoJogoLocal);
        toolbar.addSeparator();
        toolbar.add(Ranking);
        novoJogoLocal.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        b[i][j].setEnabled(true);

                    }
                }
                jBranco = new Jogador('b', 0);
                jPreto = new Jogador('p', 7);
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (b[i][j].getBackground().equals(Color.BLACK)) {
                            b[i][j].setIcon(iPreto);
                        } else {
                            b[i][j].setIcon(iBranco);
                        }
                    }
                }

                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (b[i][j].getBackground().equals(Color.BLACK)) {
                            b[i][j].setIcon(iPretoPeca);
                            jPreto.addPeca(new Pecas(jPreto, i, j));
                        }
                    }
                }
                for (int i = 5; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (b[i][j].getBackground().equals(Color.BLACK)) {
                            b[i][j].setIcon(iBrancoPeca);
                            jBranco.addPeca(new Pecas(jBranco, i, j));
                        }
                    }
                }
                turno = new Turno(jBranco, jPreto, 'b');
            }
        });
        Ranking.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                TelaRanking tela = new TelaRanking(Main.this, false);
                tela.setVisible(true);
            }
        });
    }
}
